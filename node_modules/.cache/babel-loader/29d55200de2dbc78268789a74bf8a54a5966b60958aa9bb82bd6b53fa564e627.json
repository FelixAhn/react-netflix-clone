{"ast":null,"code":"var _jsxFileName = \"/Users/anhongseon/Documents/react-netflix-clone/src/components/Banner.js\",\n  _s = $RefreshSig$();\nimport axios from \"../api/axios\";\nimport requests from \"../api/requests\";\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Banner = () => {\n  _s();\n  const [movie, setMovie] = useState([]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    // 현재 상영중인 영화 정보를 가져오기(여러 영화)\n    const request = await axios.get(requests.fetchNowPlaying);\n    console.log(request);\n\n    // 여러 영화 중 영화 하나의 ID를 가져오기\n    const movieId = request.data.results[Math.floor(Math.random() * request.data.results.length)].id;\n\n    // 특정 영화의 더 상세한 정보를 가져오기(비디오 정보도 포함)\n    const results = await axios.get(`movie/${movieId}`, {\n      params: {\n        append_to_reponse: \"videos\"\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 10\n  }, this);\n};\n_s(Banner, \"jmRb9xsBKsoKCGHCjtfP3JDQESc=\");\n_c = Banner;\nexport default Banner;\nvar _c;\n$RefreshReg$(_c, \"Banner\");","map":{"version":3,"names":["axios","requests","React","useEffect","useState","jsxDEV","_jsxDEV","Banner","_s","movie","setMovie","fetchData","request","get","fetchNowPlaying","console","log","movieId","data","results","Math","floor","random","length","id","params","append_to_reponse","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/anhongseon/Documents/react-netflix-clone/src/components/Banner.js"],"sourcesContent":["import axios from \"../api/axios\";\nimport requests from \"../api/requests\";\nimport React, { useEffect, useState } from \"react\";\n\nconst Banner = () => {\n  const [movie, setMovie] = useState([]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    // 현재 상영중인 영화 정보를 가져오기(여러 영화)\n    const request = await axios.get(requests.fetchNowPlaying);\n    console.log(request);\n\n    // 여러 영화 중 영화 하나의 ID를 가져오기\n    const movieId =\n      request.data.results[\n        Math.floor(Math.random() * request.data.results.length)\n      ].id;\n\n    // 특정 영화의 더 상세한 정보를 가져오기(비디오 정보도 포함)\n    const results = await axios.get(`movie/${movieId}`, {\n      params: { append_to_reponse: \"videos\" },\n    });\n  };\n\n  return <div></div>;\n};\n\nexport default Banner;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,cAAc;AAChC,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtCD,SAAS,CAAC,MAAM;IACdQ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B;IACA,MAAMC,OAAO,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAACZ,QAAQ,CAACa,eAAe,CAAC;IACzDC,OAAO,CAACC,GAAG,CAACJ,OAAO,CAAC;;IAEpB;IACA,MAAMK,OAAO,GACXL,OAAO,CAACM,IAAI,CAACC,OAAO,CAClBC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGV,OAAO,CAACM,IAAI,CAACC,OAAO,CAACI,MAAM,CAAC,CACxD,CAACC,EAAE;;IAEN;IACA,MAAML,OAAO,GAAG,MAAMnB,KAAK,CAACa,GAAG,CAAE,SAAQI,OAAQ,EAAC,EAAE;MAClDQ,MAAM,EAAE;QAAEC,iBAAiB,EAAE;MAAS;IACxC,CAAC,CAAC;EACJ,CAAC;EAED,oBAAOpB,OAAA;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAU,CAAC;AACpB,CAAC;AAACtB,EAAA,CAxBID,MAAM;AAAAwB,EAAA,GAANxB,MAAM;AA0BZ,eAAeA,MAAM;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}